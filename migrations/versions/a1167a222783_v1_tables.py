"""v1 tables

Revision ID: a1167a222783
Revises: 
Create Date: 2020-09-10 22:37:50.048276

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime


# revision identifiers, used by Alembic.
revision = 'a1167a222783'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    user = op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('surname', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=100), nullable=False),
    sa.Column('salt_hash', sa.String(length=100), nullable=False),
    sa.Column('telephone_number', sa.String(length=15), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    attribute_type = op.create_table('attribute_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('parent_group_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['parent_group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('postal_code',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('postal_code', sa.String(length=5), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('postal_code')
    )
    skill = op.create_table('skill',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('visible', sa.Boolean(), nullable=True),
    sa.Column('validated', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    attribute = op.create_table('attribute',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['type_id'], ['attribute_type.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('skill_user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['skill_id'], ['skill.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_postal_code',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('postal_code_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['postal_code_id'], ['postal_code.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    attribute_value_list = op.create_table('attribute_value_list',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['attribute_id'], ['attribute.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_attribute_value',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['attribute_id'], ['attribute.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    activity = op.create_table('activity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=256), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.UniqueConstraint('name')
    )
    op.create_table('skill_activity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['activity.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['skill_id'], ['skill.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.bulk_insert(user,
        [
            {
                'id': 1,
                'name': 'admin',
                'surname': 'admin',
                'email': '',
                'password_hash': '',
                'salt_hash': '',
                'created_at': datetime.utcnow(),
            }
       ]
   )

    op.bulk_insert(attribute_type,
        [
            {
                'id': 1,
                'name': "Fakulta",
                'created_at': datetime.utcnow(),
                'created_by': 1
            }
        ]
   )

    op.bulk_insert(attribute,
        [
            {
                'id': 1,
                'name': "Fakulta",
                'type_id': 1,
                'created_at': datetime.utcnow(),
                'created_by': 1
            }
        ]
    )

    op.bulk_insert(attribute_value_list,
        [
            {
                'id': 1,
                'attribute_id': 1,
                'value': "Lekárska fakulta (LF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 2,
                'attribute_id': 1,
                'value': "Právnická fakulta (PraF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 3,
                'attribute_id': 1,
                'value': "Prírodovedecká fakulta (PriF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 4,
                'attribute_id': 1,
                'value': "Pedagogická fakulta (PdF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 5,
                'attribute_id': 1,
                'value': "Farmaceutická fakulta (FaF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 6,
                'attribute_id': 1,
                'value': "Fakulta telesnej výchovy a športu (FTVŠ UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 7,
                'attribute_id': 1,
                'value': "Jesseniova lekárska fakulta v Martine (JLF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 8,
                'attribute_id': 1,
                'value': "Fakulta matematiky, fyziky a informatiky (FMFI UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 9,
                'attribute_id': 1,
                'value': "Rímskokatolícka cyrilometodská bohoslovecká fakulta (RKCMBF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 10,
                'attribute_id': 1,
                'value': "Evanjelická bohoslovecká fakulta (EBF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 11,
                'attribute_id': 1,
                'value': "Fakulta managementu (FM UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 12,
                'attribute_id': 1,
                'value': "Fakulta sociálnych a ekonomických vied (FSEV UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 13,
                'attribute_id': 1,
                'value': "Filozofická fakulta (FIF UK)",
                'created_at': datetime.utcnow(),
                'created_by': 1
            }
        ]
    )

    op.bulk_insert(skill,
        [
            {
                'id': 1,
                'name': 'Pedagogické vzdelanie alebo pedagogické minimum',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 2,
                'name': 'Šitie',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 3,
                'name': 'Prebiehajúce lekárske vzdelanie',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 4,
                'name': 'Ukončené lekárske vzdelanie',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 5,
                'name': 'Iné vzdelanie v zdravotníctve',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 6,
                'name': 'Prekladanie z angličtiny',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 7,
                'name': 'Prekladanie z nemčiny',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 8,
                'name': 'Prax v mikrobiologickom/biochemickom laboratóriu',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 9,
                'name': 'Babysitting',
                'visible': True,
                'validated': True,
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
        ]
   )

    op.bulk_insert(activity,
        [
            {
                'id': 1,
                'name': 'Online vzdelávanie detí',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 2,
                'name': 'Šitie rúšok',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 3,
                'name': 'Nákup pre seniorov',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 4,
                'name': 'Triage pacientov',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 5,
                'name': 'Preklad odborných textov o COVID - 19 z nemčiny a angličtiny do slovenčiny',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 6,
                'name': 'Call centrum v zdravotníctve',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 7,
                'name': 'Pomoc medikov pri diagnostike a medicínskych centrách',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 8,
                'name': 'Odoberanie vzoriek v teréne',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 9,
                'name': 'Pomoc so vzorkovaním v laboratóriách / testovanie v laboratóriách',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 10,
                'name': 'Babysitting',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
            {
                'id': 11,
                'name': 'Filtrovanie pacientov pri vstupe do nemocnice (meranie teploty)',
                'created_at': datetime.utcnow(),
                'created_by': 1
            },
        ]
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_attribute_value')
    op.drop_table('attribute_value_list')
    op.drop_table('user_postal_code')
    op.drop_table('user_group')
    op.drop_table('skill_user')
    op.drop_table('attribute')
    op.drop_table('skill')
    op.drop_table('postal_code')
    op.drop_table('group')
    op.drop_table('attribute_type')
    op.drop_table('user')
    op.drop_table('skill_activity')
    op.drop_table('activity')
    # ### end Alembic commands ###
